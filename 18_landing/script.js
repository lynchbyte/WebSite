import*as THREE from"three";import{OrbitControls}from"https://unpkg.com/three@0.143.0/examples/jsm/controls/OrbitControls.js";import{GLTFLoader}from"https://unpkg.com/three@0.143.0/examples/jsm/loaders/GLTFLoader.js";const canvas=document.querySelector("canvas.webgl"),scene=new THREE.Scene;scene.background=new THREE.Color(16119285);const clock=new THREE.Clock;let sizes;sizeUpdate(),THREE.Cache.enabled=!0,loadBackground(),loadGLTF();const camera=new THREE.PerspectiveCamera(50,sizes.width/sizes.height,.1,100);camera.position.set(0,1.5,7),scene.add(camera);const renderer=new THREE.WebGLRenderer({canvas:canvas,antialias:!0});renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2));const controls=new OrbitControls(camera,canvas);controls.enableDamping=!0,loadLights();const tick=()=>{controls.update(),renderer.render(scene,camera),window.requestAnimationFrame(tick)};function sizeUpdate(){const e=.75;sizes=window.innerWidth>window.innerHeight?{width:window.innerHeight*e,height:window.innerHeight*e*.6}:{width:window.innerWidth*e,height:window.innerWidth*e*.6}}function loadLights(){const e=new THREE.AmbientLight(16777215,.25);scene.add(e);const n=new THREE.DirectionalLight(16777215,1);n.position.set(0,2,2),scene.add(n)}function loadBackground(){const e=new THREE.Group,n=new THREE.PlaneGeometry(5,5,32,32),t=new THREE.ShaderMaterial({transparent:!0,side:THREE.DoubleSide,vertexShader:"\n        varying vec2 vUv;\n\n        void main()\n        {\n\n            gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n            vUv = uv;\n\n        }\n    ",fragmentShader:"\n        varying vec2 vUv;\n\n\nfloat V(float v) {\n\n    return v/255.0;\n\n  }\n\nfloat thickLine( float y, vec2 st, float offset, float width) {\n\n    float edge = y-(offset*width);\n    return step(edge-width, st.y) - step(edge, st.y);\n\n  }\n\n\nvoid main()\n\n{\n\n   vec3 col1 = vec3(V(215.0), V(195.0), V(195.0));\n   vec3 col2 = vec3(V(235.0), V(207.0), V(186.0));\n   vec3 col3 = vec3(V(233.0), V(220.0), V(201.0));\n   vec3 col4 = vec3(V(200.0), V(200.0), V(200.0));\n   vec3 col5 = vec3(V(109.0), V(110.0), V(128.0));\n\n\n   vec2 st = vec2(vUv.x, vUv.y)  ;\n\n   float width = (1.0/5.0);\n   float y = 1.0;\n\n    vec3 color = mix(col1, col2, thickLine(y, st, 1.0, width));\n    color = mix(color, col3, thickLine(y, st, 2.0, width));\n    color = mix(color, col4, thickLine(y, st, 3.0, width));\n    color = mix(color, col5, thickLine(y, st, 4.0, width));\n\n    float z = smoothstep(0.00,0.5,st.x);\n\n  gl_FragColor = vec4(color, z);\n\n}\n  "}),o=new THREE.Mesh(n,t);o.position.set(2.5,0,0),e.add(o);const i=o.clone();i.scale.set=-1,i.rotateY(90*Math.PI/180),o.position.set(0,0,-2.5),e.add(i);const a=new THREE.ShaderMaterial({transparent:!0,side:THREE.DoubleSide,vertexShader:"\n        varying vec2 vUv;\n\nvoid main()\n{\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n     vUv = uv;\n     \n}\n",fragmentShader:"\n      varying vec2 vUv;\n\n    float V(float v) {\n\n      return v / 255.0;\n\n    }\n\n\nvoid main()\n{\n\n      vec3 col5 = vec3(V(109.0), V(110.0), V(128.0));\n\n      vec2 st = vec2(vUv.x, vUv.y)  ;\n\n      float pct = 0.0;\n\n      pct = distance(st, vec2(1.0));\n\n      float z = smoothstep(1.0, 0.5, pct);\n\n      gl_FragColor = vec4(col5, z);\n\n    }\n  "}),c=new THREE.Mesh(n,a);c.rotateX(-90*Math.PI/180),c.position.set(0,-2.499,0),e.add(c),scene.add(e),e.position.set(0,.5,0),e.rotateY(45*Math.PI/180)}function loadGLTF(){console.log("loading gltf");const e=new GLTFLoader,n=new THREE.Group,t=new THREE.Vector3(0,1,0),o=new THREE.Vector3(1.5,1.5,1.5),i=new THREE.Euler(90*Math.PI/180,0*Math.PI/180,0*Math.PI/180),a=new THREE.MeshStandardMaterial({color:11363685});e.load("./18_landing/media/LynchByte_Cinzel.glb",(e=>c(e,o,"Text Model")),(e=>{console.log(e.loaded/e.total*100+"%")}),(e=>{console.log(e)}));const c=(e,t,o)=>{const i=e.scene;console.log("model,",i),i.scale.copy(t),i.traverse((function(e){e.isMesh&&(e.material=a,e.castShadow=!0,e.receiveShadow=!0)})),i.name=o,n.add(i)};scene.add(n),n.position.copy(t),n.setRotationFromEuler(i),scene.add(n)}tick(),window.addEventListener("resize",(()=>{sizeUpdate(),camera.aspect=sizes.width/sizes.height,camera.updateProjectionMatrix(),renderer.setSize(sizes.width,sizes.height),renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))}));



